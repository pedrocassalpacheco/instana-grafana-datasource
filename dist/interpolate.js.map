{"version":3,"sources":["../src/interpolate.js"],"names":["cartesianProductOfArrays","arrays","r","max","length","helper","arr","i","j","l","a","slice","push","cartesianProductOfVariables","variables","allValues","_","each","variable","value","productOfAllValues","productOfAllVariables","rowOfValues","rowOfVariables","JSON","parse","stringify","defaultContainsVariable","variableName","isNull","isEmpty","indexOf","defaultReplace","interpolatedValue","replace","name","interpolate","object","attributes","callback","containsVariable","undefined","variablesWithIndex","clone","referencedVariables","isVariableReferenced","find","attribute","objects","index","rowOfReferencedVariables","o"],"mappings":"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","file":"interpolate.js","sourcesContent":["import _ from 'lodash';\n\nfunction cartesianProductOfArrays(arrays) {\n  // Based on the code from http://stackoverflow.com/questions/15298912/\n  // javascript-generating-combinations-from-n-arrays-with-m-elements\n  var r = [], max = arrays.length - 1;\n\n  function helper(arr, i) {\n    for (var j = 0, l = arrays[i].length; j < l; j++) {\n      var a = arr.slice(0); // clone arr\n      a.push(arrays[i][j]);\n      if (i === max) {\n        r.push(a);\n      } else {\n        helper(a, i + 1);\n      }\n    }\n  }\n\n  helper([], 0);\n  return r;\n}\n\nfunction cartesianProductOfVariables(variables) {\n  // Collect the values from all of the variables\n  var allValues = [];\n  _.each(variables, function (variable) {\n    allValues.push(variable.value);\n  });\n\n  // Generate the cartesian product\n  var productOfAllValues = cartesianProductOfArrays(allValues);\n\n  // Rebuild the variables\n  var productOfAllVariables = [];\n  _.each(productOfAllValues, function (rowOfValues) {\n    var rowOfVariables = [];\n    for (var i = 0, l = variables.length; i < l; i++) {\n      // Deep clone\n      var variable = JSON.parse(JSON.stringify(variables[i]));\n      variable.value = rowOfValues[i];\n      rowOfVariables.push(variable);\n    }\n    productOfAllVariables.push(rowOfVariables);\n  });\n\n  return productOfAllVariables;\n}\n\nfunction defaultContainsVariable(value, variableName) {\n  if (_.isNull(value) || _.isEmpty(value)) {\n    return false;\n  }\n  return value.indexOf(\"$\" + variableName) >= 0;\n}\n\nfunction defaultReplace(value, variables) {\n  if (_.isNull(value) || _.isEmpty(value)) {\n    return value;\n  }\n  var interpolatedValue = value;\n  _.each(variables, function (variable) {\n    interpolatedValue = interpolatedValue.replace(\"$\" + variable.name, variable.value);\n  });\n  return interpolatedValue;\n}\n\n/**\n * Replaces the object's attributes with the values of the referenced variables.\n *\n * If a referenced variable contains multiple values or if there are multiple referenced variables\n * then we generate copies of the object with all of the possible permutations.\n *\n * See interpolate_spec.js for examples.\n *\n * @param object\n *    the object to interpolate\n * @param attributes\n *    a list of attributes on a given object that should be checked for variables\n * @param variables\n *    a list of variables of the form [{name: 'varname', value: ['value1', 'value2']}, ...]\n * @param callback\n *    an optional callback made with the object after variable substitution has been performed\n * @param containsVariable\n *    optionally override the function used to determine if a string contains a reference to the named variable\n * @param replace\n *    optionally override the function used to substitute the variable reference in a string with the variables's value\n * @returns an array of objects, if no substitutions were performed, the array will contain the original object\n */\nexport function interpolate(object, attributes, variables, callback, containsVariable, replace) {\n  // Use default for the functions when undefined\n  if (callback === undefined) {\n    callback = () => {};\n  }\n  if (containsVariable === undefined) {\n    containsVariable = defaultContainsVariable;\n  }\n  if (replace === undefined) {\n    replace = defaultReplace;\n  }\n\n  // Add the index variable with a single value\n  var variablesWithIndex = _.clone(variables);\n  variablesWithIndex.push({name: 'index', value: [0]});\n\n  // Collect the list of variables that are referenced by one or more of the keys\n  var referencedVariables = [];\n  _.each(variablesWithIndex, function (variable) {\n    var isVariableReferenced = _.find(attributes, function (attribute) {\n      return containsVariable(object[attribute], variable.name);\n    });\n\n    if (isVariableReferenced) {\n      referencedVariables.push(variable);\n    }\n  });\n\n  if (referencedVariables.length < 1) {\n    // No variables are referenced, nothing to substitute\n    callback(object);\n    return [object];\n  }\n\n  // Generate all possible permutations of the referenced variable's values\n  var productOfAllVariables = cartesianProductOfVariables(referencedVariables);\n\n  // Perform the required variable substitution\n  var objects = [];\n  var index = 0;\n  _.each(productOfAllVariables, function (rowOfReferencedVariables) {\n    // Update the value of the index variable to reflect the index of the row\n    _.each(rowOfReferencedVariables, function (variable) {\n      if (variable.name === 'index') {\n        variable.value = 'idx' + index;\n        index += 1;\n      }\n    });\n\n    var o = _.clone(object);\n    _.each(attributes, function (attribute) {\n      o[attribute] = replace(o[attribute], rowOfReferencedVariables);\n    });\n\n    callback(o);\n\n    objects.push(o);\n  });\n\n  return objects;\n}\n"]}